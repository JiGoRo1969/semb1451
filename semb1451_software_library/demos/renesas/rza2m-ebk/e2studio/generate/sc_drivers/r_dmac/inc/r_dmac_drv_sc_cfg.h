/***********************************************************************************************************************
 * DISCLAIMER
 * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products. No
 * other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
 * applicable laws, including copyright laws.
 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
 * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED. TO THE MAXIMUM
 * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES
 * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS
 * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability of
 * this software. By using this software, you agree to the additional terms and conditions found by accessing the
 * following link:
 * http://www.renesas.com/disclaimer
 *
 * Copyright (C) 2017 Renesas Electronics Corporation. All rights reserved.
 **********************************************************************************************************************/
/***********************************************************************************************************************
 * File Name    : r_dmac_drv_sc_cfg.h
 * Version      : 1.0
 * Description  : DMAC low layer driver configuration header, part of the low layer driver.
 *                This file uses the same name for any low layer driver that is supported by a compatible high layer
 *                driver.
 *                File is included in the high layer driver to allow the low layer driver to be swapped at build time
 *                and share the same high layer code.
 **********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @ingroup Interface_Library
 * @defgroup GPIO_SC_IF SC INTC API Interface
 * @brief Interface between Smart Configurator and the INTC module.
 *
 * @section GPIO_DRIVER_SC_SUMMARY Summary
 * @brief The interface allows Smart Configurator (SC) to manage the configuration of the INTC driver.
 * Do not edit this file if using SC
 *
 * @section RZA1H_GPIO_SC_IF_API_LIMITATIONS Known Limitations
 * DMA startup not implemented at this time
 *
 * @section RZA1H_GPIO_SC_IF_API_INSTANCES Known Implementations
 * @ref NONE_YET
 *
 * @section RZA1H_GPIO_SC_IF_API_RELATED Related modules
 * @ingroup RZA1H_SC_CFG
 * See also:
 * @ref RZA1H_RSK_INTC,
 * @{
 **********************************************************************************************************************/

#ifndef R_DMAC_INC_R_DMAC_DRV_SC_CFG_H_
#define R_DMAC_INC_R_DMAC_DRV_SC_CFG_H_

#include "compiler_settings.h"
#include "r_dmac_device_cfg.h"
#include "r_dmac_drv_api.h"

/******************************************************************************
 Macro definitions
 ******************************************************************************/

/* Maximum number of modules that can be granted simultaneous access to this driver  */
#define  R_CFG_DMAC_DRV_MAXIMUM_ACCESS_PRV    (1)

/******************************************************************************
 Typedefs
 ******************************************************************************/

/**
 * @section R_DMAC_SC_CFG_98_TABLE Smart Configurator settings table
 */
static const st_r_drv_dmac_sc_config_t DMAC_SC_TABLE[] =
{
    /* This code is auto-generated. Do not edit manually */
    { 0, 
        {
            DMA_RS_RXI0, 
            DMA_DATA_SIZE_1, 
            DMA_DATA_SIZE_1, 
            DMA_ADDRESS_FIX, 
            DMA_ADDRESS_INCREMENT, 
            DMA_REQUEST_DESTINATION, 
            NULL, 
            NULL, 
            0x00000000, 
            0x00000000, 
            1024, 
        }
    },
    { 1, 
        {
            DMA_RS_TXI0, 
            DMA_DATA_SIZE_1, 
            DMA_DATA_SIZE_1, 
            DMA_ADDRESS_INCREMENT, 
            DMA_ADDRESS_FIX, 
            DMA_REQUEST_DESTINATION, 
            NULL, 
            NULL, 
            0x00000000, 
            0x00000000, 
            1024, 
        }
    },
    { 2, 
        {
            DMA_RS_RXI1, 
            DMA_DATA_SIZE_1, 
            DMA_DATA_SIZE_1, 
            DMA_ADDRESS_FIX, 
            DMA_ADDRESS_INCREMENT, 
            DMA_REQUEST_DESTINATION, 
            NULL, 
            NULL, 
            0x00000000, 
            0x00000000, 
            1024, 
        }
    },
    { 3, 
        {
            DMA_RS_TXI1, 
            DMA_DATA_SIZE_1, 
            DMA_DATA_SIZE_1, 
            DMA_ADDRESS_INCREMENT, 
            DMA_ADDRESS_FIX, 
            DMA_REQUEST_DESTINATION, 
            NULL, 
            NULL, 
            0x00000000, 
            0x00000000, 
            1024, 
        }
    },
    { 4, 
        {
            DMA_RS_RXI2, 
            DMA_DATA_SIZE_1, 
            DMA_DATA_SIZE_1, 
            DMA_ADDRESS_FIX, 
            DMA_ADDRESS_INCREMENT, 
            DMA_REQUEST_DESTINATION, 
            NULL, 
            NULL, 
            0x00000000, 
            0x00000000, 
            1024, 
        }
    },
    { 5, 
        {
            DMA_RS_TXI2, 
            DMA_DATA_SIZE_1, 
            DMA_DATA_SIZE_1, 
            DMA_ADDRESS_INCREMENT, 
            DMA_ADDRESS_FIX, 
            DMA_REQUEST_DESTINATION, 
            NULL, 
            NULL, 
            0x00000000, 
            0x00000000, 
            1024, 
        }
    },
    { 6, 
        {
            DMA_RS_RXI3, 
            DMA_DATA_SIZE_1, 
            DMA_DATA_SIZE_1, 
            DMA_ADDRESS_FIX, 
            DMA_ADDRESS_INCREMENT, 
            DMA_REQUEST_DESTINATION, 
            NULL, 
            NULL, 
            0x00000000, 
            0x00000000, 
            1024, 
        }
    },
    { 7, 
        {
            DMA_RS_TXI3, 
            DMA_DATA_SIZE_1, 
            DMA_DATA_SIZE_1, 
            DMA_ADDRESS_INCREMENT, 
            DMA_ADDRESS_FIX, 
            DMA_REQUEST_DESTINATION, 
            NULL, 
            NULL, 
            0x00000000, 
            0x00000000, 
            1024, 
        }
    },
    { 8, 
        {
            DMA_RS_RXI4, 
            DMA_DATA_SIZE_1, 
            DMA_DATA_SIZE_1, 
            DMA_ADDRESS_FIX, 
            DMA_ADDRESS_INCREMENT, 
            DMA_REQUEST_DESTINATION, 
            NULL, 
            NULL, 
            0x00000000, 
            0x00000000, 
            1024, 
        }
    },
    { 9, 
        {
            DMA_RS_TXI4, 
            DMA_DATA_SIZE_1, 
            DMA_DATA_SIZE_1, 
            DMA_ADDRESS_INCREMENT, 
            DMA_ADDRESS_FIX, 
            DMA_REQUEST_DESTINATION, 
            NULL, 
            NULL, 
            0x00000000, 
            0x00000000, 
            1024, 
        }
    },
    /* End of modification */
};

#endif /* R_DMAC_INC_R_DMAC_DRV_SC_CFG_H_ */

/*******************************************************************************************************************//**
 * @} (end addtogroup DMAC_SC_IF)
 ***********************************************************************************************************************/

/***********************************************************************************************************************
 End Of File
 ***********************************************************************************************************************/
